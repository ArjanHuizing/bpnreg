?deparse
lme4:::reOnly
?safeDeparse
??safeDeparse
lme4:::safeDeparse()
lme4:::safeDeparse
lme4:::findbars
devtools::document()
library(bpnreg)
devtools::document()
library(bpnreg)
library(bpnreg)
devtools::document()
devtools::document()
library(bpnreg)
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1|Subject),
data = Maps,
its = 1000, burn = 100, n.lag = 3)
traceplot(fit.Maps2, parameter = "VCovI")
devtools::document()
library(bpnreg)
its = 1000, burn = 100, n.lag = 3)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1|Subject),
data = Maps,
its = 1000, burn = 100, n.lag = 3)
traceplot(fit.Maps2, parameter = "VCovI")
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1|Subject),
data = Maps,
its = 1000, burn = 100, n.lag = 3)
traceplot(fit.Maps2, parameter = "VCovI")
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "VCovI")
devtools::document()
library(bpnreg)
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "VCovI")
traceplot(fit.Maps2, parameter = "VCovII")
traceplot(fit.Maps2, parameter = "VCovII", variable = "(Intercept)")
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "VCovI")
traceplot(fit.Maps2, parameter = "VCovII", variable = "(Intercept)")
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1 + Trial.type|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "VCovII", variable = "(Intercept)")
traceplot(fit.Maps2, parameter = "VCovI")
traceplot(fit.Maps2, parameter = "VCovII")
traceplot(fit.Maps2, parameter = "VCovI", variable = "(Intercept)")
traceplot(fit.Maps2, parameter = "cRI", variable = "(Intercept)")
traceplot(fit.Maps2, parameter = "cRI")
traceplot(fit.Maps2, parameter = "Beta.I")
traceplot(fit.Maps2, parameter = "CRSnum")
traceplot(fit.Maps2, parameter = "cRSnum")
fit.Maps2$cRSnum
traceplot(fit.Maps2, parameter = "CRScat")
traceplot(fit.Maps2, parameter = "cRScat")
devtools::document()
devtools::document()
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1 + Trial.type|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "cRI")
traceplot(fit.Maps2, parameter = "cRI")
traceplot(fit.Maps2, parameter = "cRScat")
traceplot(fit.Maps2, parameter = "cRI")
devtools::document()
library(bpnreg)
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1|Subject),
)
)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1 + Trial.type|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "cRI")
traceplot(fit.Maps2, parameter = "cRScat")
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1 + Trial.type|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "cRI")
?lme4:::RHSForm
??lme4:::RHSForm
??lme4:::RHSForm()
library(lme4)
lme4:::RHSForm
?reformulate
??lme4:::reOnly
lme4:::reOnly
?findbars
?safeDeparse
??safeDeparse
lme4:::safeDeparse
?reformulate
citation(lme4)
devtools::document()
library(bpnreg)
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 10000, burn = 1000, n.lag = 3)
devtools::document()
library(bpnreg)
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 10000, burn = 1000, n.lag = 3)
devtools::document()
library(bpnreg)
devtools::document()
library(bpnreg)
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 10000, burn = 1000, n.lag = 3)
RHSForm
cat_check
pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject)
ran_form.I <- pred.I
reOnly(ran_form.I)
reOnly <- function(f, response = FALSE){
response <- if (response && length(f) == 3)
f[[2]]
else NULL
reformulate(paste0("(", vapply(lme4::findbars(f), safeDeparse,
""), ")"), response = response)
}
RHSForm <- function(form, as.form = FALSE){
rhsf <- form[[length(form)]]
if (as.form)
reformulate(deparse(rhsf))
else rhsf
}
safeDeparse <- function(x, collapse = " "){
paste(deparse(x, 500L), collapse = collapse)
}
RHSForm(ran_form.I) <- lme4::subbars(RHSForm(reOnly(ran_form.I)))
RHSForm
RHSForm(reOnly(ran_form.I))
lme4::subbars(RHSForm(reOnly(ran_form.I)))
RHSForm(lme4::subbars(RHSForm(reOnly(ran_form.I))))
ran_form.I <- RHSForm(lme4::subbars(RHSForm(reOnly(ran_form.I))))
lab_ran.I <- attr(terms(ran_form.I), "term.labels")
ran_form.I <- lme4::subbars(RHSForm(reOnly(ran_form.I)))
RHSForm(ran_form.I) <- lme4::subbars(RHSForm(reOnly(ran_form.I)))
lme4::subbars(RHSForm(reOnly(ran_form.I)))
lme4::subbars(RHSForm(reOnly(ran_form.I)))
ran_form.I <- pred.I
RHSForm(ran_form.I) <- lme4::subbars(RHSForm(reOnly(ran_form.I)))
lme4::subbars(RHSForm(reOnly(ran_form.I)))
attr(terms(ran_form.I), "term.labels")
lab_ran.I <- attr(terms(ran_form.I), "term.labels")
ength(lab_ran.I)
length(lab_ran.I)
length(lab_ran.I)
fix_form.I <- pred.I
lme4::nobars(RHSForm(fix_form.I))
lme4::subbars(RHSForm(reOnly(ran_form.I)))
RHSForm(fix_form.I)
lme4::nobars(RHSForm(fix_form.I))
RHSForm(reOnly(ran_form.I))
lme4::subbars(RHSForm(reOnly(ran_form.I)))
ran_form.I <- lme4::subbars(RHSForm(reOnly(ran_form.I)))
attr(terms(RHSForm(ran_form.I)), "term.labels")
attr(terms(ran_form.I), "term.labels")
ran_form.I <- pred.I
lme4:::RHSForm(ran_form.I) <- lme4::subbars(lme4:::RHSForm(reOnly(ran_form.I)))
ran_form.I
attr(terms(ran_form.I), "term.labels")
ran_form.I
ran_form.I <- pred.I
attr(terms(ran_form.I), "term.labels")
lme4:::RHSForm(ran_form.I) <- lme4::subbars(lme4:::RHSForm(reOnly(ran_form.I)))
lme4:::RHSForm(ran_form.I)
attr(terms(ran_form.I), "term.labels")
RHSForm(fix_form.I) <- lme4::nobars(RHSForm(fix_form.I))
lme4:::RHSForm()
lme4:::RHSForm
bpnreg:::BFc()
bpnreg:::betaBlock.fRI
bpnreg:::RHSForm
lme4:::RHSForm()
lme4:::RHSForm
bpnreg:::RHSForm(ran_form.I) <- lme4::subbars(bpnreg:::RHSForm(reOnly(ran_form.I)))
ran_form.I <- pred.I
bpnreg:::RHSForm(ran_form.I) <- lme4::subbars(bpnreg:::RHSForm(reOnly(ran_form.I)))
lme4::subbars
??subbars
??as.name
lme4::nobars
lme4::findbars
?substitute
?expandSlash
lme4::expandDoubleVerts()
lme4::expandDoubleVerts
devtools::document()
library(bpnreg)
ran_form.I <- pred.I
RHSForm(ran_form.I) <- subbars(RHSForm(reOnly(ran_form.I)))
subbars(RHSForm(reOnly(ran_form.I)))
devtools::document()
library(bpnreg)
pred.I <- outcome ~ x1 + x1 + (1|class)
ran_form.I <- pred.I
RHSForm(ran_form.I) <- subbars(RHSForm(reOnly(ran_form.I)))
devtools::document()
library(bpnreg)
ran_form.I <- pred.I
subbars(RHSForm(reOnly(ran_form.I)))
RHSForm(reOnly(ran_form.I))
reOnly(ran_form.I)
bpnreg:::reOnly(ran_form.I)
bpnreg:::RHSForm(bpnreg:::reOnly(ran_form.I))
bpnreg:::subbars(bpnreg:::RHSForm(bpnreg:::reOnly(ran_form.I)))
bpnreg:::RHSForm(ran_form.I) <- bpnreg:::subbars(bpnreg:::RHSForm(bpnreg:::reOnly(ran_form.I)))
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 10000, burn = 1000, n.lag = 3)
cars
colnames(cars)
colnames<-
`colnames<-`
`+`(3, 5)
3 + 5
`RHSForm<-`
lme4:::\`RHSForm<-`
lme4:::`RHSForm<-`
`[`(cars, "speed")
devtools::document()
library(bpnreg)
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 10000, burn = 1000, n.lag = 3)
lme4:::nobars_
lme4:::anyBars
lme4:::isAnyArgBar
lme4:::isBar
??seq_along
devtools::document()
devtools::document()
library(bpnreg)
its = 10000, burn = 1000, n.lag = 3)
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 10000, burn = 1000, n.lag = 3)
fit(fit.Maps)
devtools::document()
library(bpnreg)
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 10000, burn = 1000, n.lag = 3)
fit(fit.Maps)
devtools::document()
library(bpnreg)
fit(fit.Maps)
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 10000, burn = 1000, n.lag = 3)
fit(fit.Maps)
devtools::check()
?is
devtools::check()
devtools::check()
devtools::document()
library(bpnreg)
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1 + Trial.type|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "cRS")
class(fit.Maps2$cRSnum)
colnames(fit.Maps2$cRS)
colnames(fit.Maps2$cRI)
devtools::document()
library(bpnreg)
traceplot(fit.Maps2, parameter = "cRS")
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1 + Trial.type|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "cRS")
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1 + Trial.type|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "cRS")
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1 + Trial.type|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps2, parameter = "cRS")
traceplot(fit.Maps2, parameter = "cRS", variable = "Trial.type")
devtools::document()
library(bpnreg)
devtools::check()
devtools::document()
library(bpnreg)
devtools::check()
devtools::document()
library(bpnreg)
devtools::check()
devtools::document()
library(bpnreg)
fit.Maps <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c + (1|Subject),
data = Maps,
its = 100, burn = 10, n.lag = 3)
traceplot(fit.Maps, parameter = "VCovI")
traceplot(fit.Maps, parameter = "VCovII")
traceplot(fit.Maps, parameter = "cRI")
traceplot(fit.Maps, parameter = "Beta.I")
traceplot(fit.Maps, parameter = "Beta.I", variable = "Maze1")
traceplot(fit.Maps, parameter = "VCovI", variable = "(Intercept)")
devtools::check()
devtools::document()
library(bpnreg)
devtools::check()
devtools::document()
library(bpnreg)
devtools::check()
devtools::build_win()
devtools::use_travis()
devtools::use_travis()
devtools::use_readme_rmd()
devtools::document()
library(bpnreg)
use_readme_rmd()
devtools::use_readme_rmd()
devtools::document()
library(bpnreg)
Motor <- haven::read_spss(file = "data-raw/Motor Cognition/PhaseDifference.sav")
Motor <- Motor[,1:3]
Motor <- cbind(Motor, Motor$PhaseDiff*(pi/180))
colnames(Motor) <- c("Cond", colnames(Motor[,-c(1,4)]), "Phaserad")
Motor$Cond <- factor(Motor$Cond, labels = c("exp", "semi.imp", "imp"))
Motor$AvAmp <- Motor$AvAmp - mean(Motor$AvAmp)
devtools::use_data(Motor, overwrite = TRUE)
require(haven)
Motor <- haven::read_spss(file = "data-raw/Motor Cognition/PhaseDifference.sav")
Motor <- Motor[,1:3]
Motor <- cbind(Motor, Motor$PhaseDiff*(pi/180))
colnames(Motor) <- c("Cond", colnames(Motor[,-c(1,4)]), "Phaserad")
Motor$Cond <- factor(Motor$Cond, labels = c("exp", "semi.imp", "imp"))
Motor$AvAmp <- Motor$AvAmp - mean(Motor$AvAmp)
devtools::use_data(Motor, overwrite = TRUE)
Motor <- haven::read_spss(file = "data_raw/Motor Cognition/PhaseDifference.sav")
Motor <- Motor[,1:3]
Motor <- cbind(Motor, Motor$PhaseDiff*(pi/180))
colnames(Motor) <- c("Cond", colnames(Motor[,-c(1,4)]), "Phaserad")
Motor$Cond <- factor(Motor$Cond, labels = c("exp", "semi.imp", "imp"))
Motor$AvAmp <- Motor$AvAmp - mean(Motor$AvAmp)
devtools::use_data(Motor, overwrite = TRUE)
devtools::document()
library(bpnreg)
?Motor
Motor
devtools::document()
library(bpnreg)
units <- "radians"
!(units == "degrees" | units == "radians")
paste(c("ax", "ac", "bc", "AS", "SAM", "SSDO"), c("mean", "mode", "sd", "LB HPD", "UB HPD"))
paste(rep(c("ax", "ac", "bc", "AS", "SAM", "SSDO"),5), c("mean", "mode", "sd", "LB HPD", "UB HPD"))
paste(c("ax", "ac", "bc", "AS", "SAM", "SSDO"), rep(c("mean", "mode", "sd", "LB HPD", "UB HPD"), 5)
)
paste(rep(c("mean", "mode", "sd", "LB HPD", "UB HPD"), 5), c("ax", "ac", "bc", "AS", "SAM", "SSDO"))
?rep()
c("mean", "mode", "sd", "LB HPD", "UB HPD"), each = 5)
rep(c("mean", "mode", "sd", "LB HPD", "UB HPD"), each = 5)
paste(rep(c("ax", "ac", "bc", "AS", "SAM", "SSDO"), each = 5), c("mean", "mode", "sd", "LB HPD", "UB HPD"))
devtools::document()
library(bpnreg)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 + Cond, data = Motor,
its = 10000, burn = 100, n.lag = 5)
coef_circ(fit.Motor, type = "continuous")
coef_circ(fit.Motor, type = "categorical")
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + (1|Subject),
data = Maps,
its = 100, burn = 100, n.lag = 3)
coef_circ(fit.Maps2)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learning.c + (1|Subject),
+                    data = Maps,
+                    its = 100, burn = 100, n.lag = 3)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learning.c +  (1|Subject),
data = Maps,
its = 100, burn = 100, n.lag = 3)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learning_c +  (1|Subject),
data = Maps,
its = 100, burn = 100, n.lag = 3)
Maps
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c +  (1|Subject),
data = Maps,
its = 100, burn = 100, n.lag = 3)
coef_circ(fit.Maps2)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 + Cond + AvAmp, data = Motor,
its = 10000, burn = 100, n.lag = 5)
coef_circ(fit.Motor, type = "continuous")
coef_circ(fit.Motor, type = "categorical")
devtools::document()
library(bpnreg)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 + Cond + AvAmp, data = Motor,
its = 10000, burn = 100, n.lag = 5)
coef_circ(fit.Motor, type = "continuous")
coef_circ(fit.Motor, type = "categorical")
devtools::document()
library(bpnreg)
coef_circ(fit.Motor, type = "continuous")
coef_circ(fit.Motor, type = "categorical")
devtools::document()
library(bpnreg)
coef_circ(fit.Motor, type = "categorical")
coef_circ(fit.Motor, type = "continuous")
coef_circ(fit.Motor, type = "categorical")
fit.Motor$circ.coef
devtools::document()
library(bpnreg)
coef_circ(fit.Motor, type = "continuous")
coef_circ(fit.Motor, type = "categorical")
coef_circ(fit.Motor, type = "categorical", units = "degrees")
devtools::document()
library(bpnreg)
coef_circ(fit.Maps2, type = Continuous)
coef_circ(fit.Maps2, type = "continuous")
coef_circ(fit.Maps2, type = "continuous", units = "degrees")
coef_circ(fit.Maps2, type = "categorical", units = "degrees")
devtools::document()
library(bpnreg)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 + Cond + AvAmp, data = Motor,
its = 10000, burn = 100, n.lag = 5)
fit.Motor$circ.coef.means
fit.Motor$circ.coef.cat
devtools::document()
library(bpnreg)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 + Cond + AvAmp, data = Motor,
its = 10000, burn = 100, n.lag = 5)
fit.Motor$circ.coef.means
fit.Motor$circ.coef.cat
devtools::document()
library(bpnreg)
devtools::document()
library(bpnreg)
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c +  (1|Subject),
data = Maps,
its = 100, burn = 100, n.lag = 3)
fit.Maps2$circ.coef.means
fit.maps2$circ.coef.means
fit.Maps2$circ.coef.cat
devtools::document()
library(bpnreg)
coef_circ(Motor, type = "categorical")
coef_circ(fit.Motor, type = "categorical")
fit.Maps2 <- bpnme(pred.I = Error.rad ~ Maze + Trial.type + Learn.c +  (1|Subject),
data = Maps,
its = 100, burn = 100, n.lag = 3)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 + Cond + AvAmp, data = Motor,
its = 10000, burn = 100, n.lag = 5)
coef_circ(fit.Motor, type = "categorical")
coef_circ(fit.Motor, type = "categorical", units = "degrees")
coef_circ(fit.Maps2, type = "categorical")
coef_circ(fit.Maps2, type = "categorical", units = "degrees")
devtools::document()
library(bpnreg)
print(fit.Motor)
print(fit.Maps2)
devtools::document()
library(bpnreg)
print(fit.Maps2)
devtools::document()
library(bpnreg)
print(fit.Maps2)
print(fit.Motor)
print(fit.Maps2)
devtools::check()
devtools::document()
library(bpnreg)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 + Cond, data = Motor,
its = 10000, burn = 100, n.lag = 5)
coef_circ(fit.Motor, type = "continuous")
coef_circ(fit.Motor, type = "categorical")
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 + Cond, data = Motor,
its = 10000, burn = 100, n.lag = 5)
coef_circ(fit.Motor, type = "categorical")
coef_circ(fit.Motor, type = "categorical", units = "degrees")
fit.Maps2 <- bpnme(pred.I = Error.rad ~  (1|Subject),
data = Maps,
its = 100, burn = 100, n.lag = 3)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 , data = Motor,
its = 10000, burn = 100, n.lag = 5)
devtools::document()
library(bpnreg)
fit.Motor <- bpnr(pred.I = Phaserad ~ 1 , data = Motor,
its = 10000, burn = 100, n.lag = 5)
coef_circ(ft.Motor, type = "categorical")
coef_circ(fit.Motor, type = "categorical")
devtools::document()
library(bpnreg)
